package com.ezen.myproject.service;

import javax.inject.Inject;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.ezen.myproject.domain.memberVO;
import com.ezen.myproject.repository.MemberDAO;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class MemberServiceImpl implements MemberService
{
	@Inject
	private MemberDAO mdao;
	
	//passowrd Encode 하기 위한 security 디펜던시 추가.
	@Inject
	BCryptPasswordEncoder passwordEncoder;

	@Override
	public int signup(memberVO mvo) {
		//아이디가 중복되면 회원가입 실패
		//아이디를 주고,db에서 일치하는 유저를 달라고 요청
		//일치하는 유저가 없다면 가입(1),유저가 있으면 실패(0)
		memberVO temp=mdao.getUser(mvo.getId());
		if(temp!=null)
			return 0;
		//아이디가 중복되지 않는다면 회원가입 진행~!!
		if(mvo.getId()==null||mvo.getId().length()==0)
			return 0;
		if(mvo.getPw()==null||mvo.getPw().length()==0)
			return 0;
		//id와pw값이 들어오면 회원가입 진행
		
		//회원가입 진행
		//암호화(encode) /mathes(원래비번,암호화된 비번)
		String pw=mvo.getPw();
		String encodePw=passwordEncoder.encode(pw);//패스워드 암호화
		//멤버 객체에 암호화된 패스워드로 변경
		mvo.setPw(encodePw);
		
		//회원가입
		log.info("signup check2");
		return mdao.signup(mvo);
	}

	@Override
	public memberVO isUser(memberVO mvo) 
	{
		//로그인 유저 확인 메서드
		//아이디를주고,해당 아이디의 객체 가져오기
		memberVO temp=mdao.getUser(mvo.getId()); //회원가입할때 사용한 메서드 호출
		
		//해당 아이디의 객체가 없는 경우
		if(temp==null)
			return null;
		
		return null;
	}

}
