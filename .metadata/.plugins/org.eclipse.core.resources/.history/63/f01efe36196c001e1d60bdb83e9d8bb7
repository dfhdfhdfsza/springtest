package com.ezen.myproject.controller;

import java.util.List;

import javax.inject.Inject;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.ezen.myproject.domain.boardDTO;
import com.ezen.myproject.domain.boardVO;
import com.ezen.myproject.domain.fileVO;
import com.ezen.myproject.domain.pagingVO;
import com.ezen.myproject.handler.FileHandler;
import com.ezen.myproject.handler.PagingHandler;
import com.ezen.myproject.service.BoardService;

import lombok.extern.slf4j.Slf4j;

@Controller
@RequestMapping("/board/*")
@Slf4j
public class BoardController 
{
	@Inject
	private BoardService bsv;
	
	@Inject
	private FileHandler fhd;
	
	@GetMapping("/register")
	public String boardRegisterGet() 
	{
		//servlet-context.xml에서 자동으로 .jsp를 붙여주는 설정을 해줘서 별도로 안붙여줘도됨
		return "/board/register";
	}
	
//	@PostMapping("/register")
//	public String register(boardVO bvo)
//	{
//		log.info(">>>"+bvo.toString());
//		int isOk=bsv.register(bvo);
//		log.info("board register>>"+(isOk>0? "OK":"FAIL"));
//		
//		return "redirect:/board/list";
//	}
	//required(필수 여부)=false :해당 파라미터가 없어도 예외가 발생하지않음.
	@PostMapping("/register")
	public String register(boardVO bvo,@RequestParam(name="files",required = false)MultipartFile[] files)
	{
		log.info(">>>"+bvo.toString());
		log.info(">>files"+files);
		
		List<fileVO>flist=null;
		//files가 null일수 있음. 첨부파일이 있을 경우에만 fhd 호출
		if(files[0].getSize()>0) { //첫번째 파일의 size가 0보다 크다면
			//flist에 파일 객체 담기
			flist=fhd.uploadFiles(files);			
		}else{
			log.info("file null");
		}
		boardDTO bdto=new boardDTO(bvo,flist);
		int isOk=bsv.register(bdto);
		
//		int isOk=bsv.register(bvo);
//		log.info("board register>>"+(isOk>0? "OK":"FAIL"));
		
		return "redirect:/board/list";
	}
	
	@GetMapping("/list")
	public String list(Model model,pagingVO pgvo) 
	{
		log.info(">>pgvo>>"+pgvo);
		//getList(pgvo); 수정
		List<boardVO>list=bsv.getList(pgvo);
		int totalCount=bsv.getTotalCount(pgvo); //등록
		log.info("totalcount>"+totalCount);
		PagingHandler ph= new PagingHandler(pgvo, totalCount);
		log.info("ph>"+ph);
		model.addAttribute("list", list);
		
		model.addAttribute("ph",ph);
		return "/board/list";
	}
	
	@GetMapping({"/detail","/modify"})
	public void detail(Model model,@RequestParam("bno")int bno) 
	{
		log.info("detail bno>>"+bno);
//		boardVO bvo =bsv.getDetail(bno);
		boardDTO bdto = bsv.getDetailFile(bno);
	    model.addAttribute("boardDTO", bdto);
		
	}
	
	//수정할때 들어가는 부당 read_count 2개
	@PostMapping("/modify")
	public String modify(boardVO bvo,RedirectAttributes reAttr,@RequestParam(name="files",required = false)MultipartFile[] files)
	{
		log.info(">>modify bvo:"+bvo);
		log.info(">>modify files:"+files);
		
		List<fileVO>flist=null;
		int isOk=bsv.modify(bvo);
		log.info((isOk>0)? "OK":"FAIL");
		return "redirect:/board/detail?bno="+bvo.getBno();
	}
	@GetMapping("/remove")
	public String remove(@RequestParam("bno")int bno,RedirectAttributes reAttr) 
	{
		log.info("remove check 1");
		int isOk=bsv.remove(bno);
		log.info((isOk>0)? "OK":"FAIL");
		reAttr.addFlashAttribute("isOk",isOk);
		return "redirect:/board/list";
	}
	@DeleteMapping(value="/file/{uuid}")
	public ResponseEntity<String> removeFile(@PathVariable("uuid")String uuid)
	{
		log.info("removeFile check");
		log.info("uuid:>>"+uuid);
		int isOk=bsv.removeFile(uuid);
		log.info((isOk>0)? "OK":"FAIL");
		return isOk>0? new ResponseEntity<String>("1",HttpStatus.OK):new ResponseEntity<String>("0",HttpStatus.INTERNAL_SERVER_ERROR);
		
	}
	
}
